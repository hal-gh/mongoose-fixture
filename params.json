{"name":"Mongoose-fixture","tagline":"Mongoose-Fixture is a command-line and utility library to load static json arrays/documents into mongodb.","body":"# Mongoose-Fixture\r\n\r\nInspired from Django's data-fixtures and Ruby's rake but built for nodejs.  Mongoose-Fixture is a command-line and utility library to load static json arrays/documents into mongodb.  Ideal for working with the [MEAN](http://blog.mongodb.org/post/49262866911/the-mean-stack-mongodb-expressjs-angularjs-and) stack. \r\n\r\n## Why would I use it?\r\n\r\nInstalling Mongodb will give access to the ``mongoimport`` command, however that is for simple importing and not flexible as a workflow-tool. \r\n\r\nMongoose-Fixture comes with the following features to improve developer workflow\r\n\r\n* Project Configuration, organize documents collections into sets, for custom batch executions\r\n* BoilerPlates, generate Schemas/Fixtures to reduce typing\r\n* API can be used within other processes, a nodejs event-emitter\r\n\r\n\r\n# Getting Started\r\n\r\n## Installation\r\n\r\nRecommend global install as this package contains a bin command that can be used globally accepting configuration files\r\n\r\n    npm install -g mongoose-fixture\r\n\r\nIn order to get started with Mongoose-Fixture we first must create our config-file and then define our fixtures/schemas.\r\n\r\n## Creating a ConfigFile\r\n\r\nMongoose-Fixture cmd usage requires the creation of a config-file for each project.  This config file specifies where and how to load fixtures/schemas as well as the boiler-plate generators.\r\n\r\nFirst you must create this config file, ``cd`` to your projects local-root directory.\r\n\r\n    // creates a file ``mongoose-fixture-config.js`` in your working directory\r\n    mongoose-fixture --generateConfig\r\n\r\n    // or you can define your own name\r\n    mongoose-fixture --generateConfig='mf-config'\r\n\r\nA generated config file will contain several environment variables such as mongodb connection strings, default directories for ``fixtures/`` and ``schemas``. And a single fixture-listing called ``all``.  You will need to customize these for your project. \r\n\r\nBy default ``mongoose-fixture`` will look for a config file in the local directory called ``mongoose-fixture-config`` if you have different file name or wish to use ``mongoose-fixture`` with a different config you can specifiy the config in the cmd\r\n\r\n    mongoose-fixture --configFile='/project/outDoorCamper/mf-config'\r\n\r\n## Creating our Fixtures/Schemas\r\n\r\nOnce we have created our config file for our project we can now begin creating our fixtures/schemas - assuming you are fine with the default config paths and have created the directories.\r\n\r\nOnce again we can generate boiler-plates for our schemas and fixtures\r\n\r\nFirst we will create a Schema, lets pretend we are building an ecommerece store so we generate a schema for our ``Products``\r\n\r\n    mongoose-fixture --generateSchema='ProductSchema'\r\n\r\nThis should create a file called ``ProductSchema.js`` in your ``schemas/`` project directory.\r\n\r\nThen we should create our corresponding data-fixture\r\n\r\n    mongoose-fixture --generateFixture='Products'\r\n\r\nwhich will create a file ``products.js`` in the ``fixtures/`` directory.\r\n\r\nFrom here you should first edit your ``ProductSchema.js`` and create the schema you want based on the [mongoose-documentation](http://mongoosejs.com/docs/guide.html).\r\n\r\nThen you should edit your corresponding data-fixture to follow the defined schema.  Any field you add to your data-fixture objects that aren't part of the schema will be ignored when loaded into mongoDB.\r\n\r\n## Updating your Config with Fixture/Schema\r\n\r\nInside of your config file you will need to add you newly created schema/fixture pairs to a FixtureListing.\r\n\r\n    // create our primary listing set\r\n    var allFixtures = [{\r\n        itemName:'Products', \r\n        schema:'ProductSchema',\r\n        data:'Products',\r\n        collection:'products'\r\n    }];\r\n\r\nYou should now be all set to load your fixture data.\r\n\r\n\r\n## Loading Fixtures into MongoDB\r\n\r\nTo interact with your fixtures/schemas you will need to use two parameter flags.\r\n\r\n* --fixture listing\r\n** defines which collection of fixtures you want the ``method`` to use\r\n* method [--add, --remove, --reset] to be defined.\r\n** reset first does --remove and then does --add behind the scenes\r\n\r\n\r\nexamples assume you have ``mongoose-fixture-config.js`` in local dir:\r\n\r\n    //  loads fixture 'all' and just adds the documents\r\n    mongoose-fixture --fixture='all' --add\r\n\r\n    // removes only the documents from the collections define in the fixture 'stores' in the config\r\n    mongoose-fixture --fixture='stores' --remove \r\n\r\n    // can run fixtures for an entire different project using a different command\r\n    // using the reset would drop all the documents from the collections in fixture catalog and then reload them\r\n    mongoose-fixture --fixture='catalog' --reset\r\n\r\n\r\n# New Development / Contribution\r\n\r\n* more tests\r\n* create a grunt hook, consider supporting own bin command?\r\n* more documentation (specifically examples)\r\n\r\n\r\n","google":"UA-43284729-1","note":"Don't delete this file! It's used internally to help with page regeneration."}